Para colocar uma tag em todas as instâncias que têm o valor de AMI diferente do que está definido em uma variável e verificar se a instância já não tem a tag, você pode usar o seguinte script em Python com boto3:

```python
import boto3

# Definir o cliente do boto3 para o Amazon EC2
ec2 = boto3.client('ec2')

# Definir o ID da AMI para a qual a tag será aplicada
ami_id = 'AMI-ID'  # Substitua AMI-ID pelo ID da AMI desejada

# Definir a tag que será adicionada ou atualizada
nova_tag = {'Key': 'Nome_da_tag', 'Value': 'Valor_da_tag'}

# Obter todas as instâncias que têm o valor de AMI diferente do que está definido em uma variável
instancias = ec2.describe_instances(Filters=[
    {'Name': 'image-id', 'Values': [ami_id,]},
    {'Name': 'instance-state-name', 'Values': ['running', 'stopped', 'pending', 'stopping']},
])['Reservations']

# Adicionar ou atualizar a tag em cada instância que atenda aos critérios do filtro
for reserva in instancias:
    for instancia in reserva['Instances']:
        id_instancia = instancia['InstanceId']

        # Verificar se a instância já tem a tag
        tags_existentes = ec2.describe_tags(
            Filters=[
                {'Name': 'resource-id', 'Values': [id_instancia,]},
                {'Name': 'key', 'Values': [nova_tag['Key'],]},
                {'Name': 'value', 'Values': [nova_tag['Value'],]}
            ]
        )['Tags']

        # Adicionar ou atualizar a tag, se necessário
        if not tags_existentes:
            ec2.create_tags(Resources=[id_instancia], Tags=[nova_tag])
            print(f"A tag {nova_tag['Key']}={nova_tag['Value']} foi adicionada na instância {id_instancia}.")
        else:
            print(f"A instância {id_instancia} já tem a tag {nova_tag['Key']}={nova_tag['Value']}.")
```

Este script usa a função `describe_instances` do boto3 para obter todas as instâncias que têm o valor de AMI diferente do que está definido na variável `ami_id`. Em seguida, ele usa a função `describe_tags` do boto3 para verificar se cada instância já tem a tag definida na variável `nova_tag`. Se a tag não existir, ele adiciona a tag usando a função `create_tags`. Se a tag já existir, ele imprime uma mensagem informando que a instância já tem a tag e passa para a próxima instância. Certifique-se de substituir `AMI-ID`, `Nome_da_tag` e `Valor_da_tag` pelos valores corretos para o seu caso de uso.

##########td
import boto3

# Definir o cliente do boto3 para o SSM
ssm = boto3.client('ssm')

# Definir o ID da instância onde o td-agent está sendo executado
instance_id = 'INSTANCE_ID'

# Definir o comando de teste que será executado na instância
test_command = 'sudo /usr/sbin/logrotate -v /etc/logrotate.d/td-agent'

# Executar o comando de teste na instância e capturar a saída
response = ssm.send_command(
    InstanceIds=[instance_id],
    DocumentName='AWS-RunShellScript',
    Parameters={'commands': [test_command]}
)
command_id = response['Command']['CommandId']
output = ''
while True:
    response = ssm.get_command_invocation(CommandId=command_id, InstanceId=instance_id)
    if response['Status'] in ['Success', 'Failed']:
        output += response['StandardOutputContent']
        output += response['StandardErrorContent']
        break

# Verificar se o logrotate foi executado corretamente
if 'rotating pattern' in output and 'considering log' in output and 'running postrotate script' in output:
    print('O logrotate foi executado corretamente.')
else:
    print('Houve um problema ao executar o logrotate.')
    
# Verificar se os logs antigos foram excluídos corretamente
if 'removing old log' in output:
    print('Os logs antigos foram excluídos corretamente.')
else:
    print('Houve um problema ao excluir os logs antigos.')
    
# Verificar se os logs estão sendo escritos corretamente
if 'creating new log' in output:
    print('Os logs estão sendo escritos corretamente.')
else:
    print('Houve um problema ao escrever os logs.')
